<?php

/**
 * Class get information to service.
 *
 * @author juanfrasr
 */
class kpaxSrv {

    protected $url = "http://localhost:8081";
    private $key;
    private $username;
    private $apiKey = "95d01c544da3d839f414c1f16376694693ff8376";// Public API key generated by elgg
    private $oauthKpax = null;

  /**
   * CONSTRUCTOR
   */
  public function __construct($username) { //TODO: ha de ser kPAXadmin o admin per defecte???
    $this->oauthKpax = new kpaxOauth();
    $this->userName = str_replace("uoc.edu_", "", $userName); //Case UOC login
    $body = 'username=' . trim($this->userName . "&apikey=" . $this->apiKey);

    //TODO: user/sign/elgg
    //TODO: save session
    // $_SESSION["campusSession"] = $this->service("user/sign/elgg", "POST", $body);

    $_SESSION["campusSession"] = 'campus_session';
  }

    //TODO
    public function getKey() {
        return $this->key;
    }

    //TODO
    public function oauth($key,$secret){
        $this->oauthKpax->setKeySecret($key, $secret);
    }

  /**
   * HTTP call. Makes an http call
   *
   * @return { status: {Integer}, body: {JSON}, raw: {String}}
   */
  private function service($action, $type = 'GET', $body = '', $header = 'application/json') {
      //TODO: fix signature
      $signature = $this->oauthKpax->getSignature($type, $this->url . $action);

      $url = $this->url . $action;

      error_log("** REQUEST: " . $type . " " . $url);
  
      if ($body != '') {
        $content = json_encode($body);
      }
      $options = array('http' =>
        array (
          'method' => $type,
          'header' => 'Content-Type: ' . $header,
          'content' => $content
        )
      );

      //PROBLEMS
      $body = file_get_contents($url, false, stream_context_create($options));
      $status = $this->getHttpStatus($http_response_header);

      error_log('** RESPONSE: ' . $status . ' ' . $body);
      error_log("** ------------------------------");
      
      return array(
        'status' => $status,
        'body' => json_decode($body),
        'raw' => $body
      );
  }

  /**
   * Return response code
   * From Mangall http://php.net/manual/en/reserved.variables.httpresponseheader.php
   *
   * @return {Integer}
   */
  private function getHttpStatus ($headers) {
    $status = 0;
    //PROBLEMS
    foreach ($headers as $k=>$v) {
      $t = explode( ':', $v, 2 );
      if(!isset( $t[1])) {
        // parse status
        if(preg_match( "#HTTP/[0-9\.]+\s+([0-9]+)#", $v, $out)) {
          $status = intval($out[1]);
        }
      }
    }

    return $status;
  }

  /**
   * getListGames
   * API2
   */
  public function getGame($gameId, $campusSession) {
    return $this->service('/game/' . $gameId)['body'];
  }

  public function getUser($userId, $campusSession) {
    return $this->service('/user/' . $userId)['body'];
  }
  
    //TODO (other plugin?)
    public function addLikeGame($campusSession, $containerId, $productId) {
      $body = 'secretSession=' . $campusSession . '&containerId=' . $containerId;
      //return $this->service("/game/like/" . $productId . "/add", "POST", $body);
      return $this->service("/game/" . $productId . "/like/", "POST", $body);
    }

    //TODO (other plugin?)
    public function delLikeGame($campusSession, $containerId, $productId) {
        $body = 'secretSession=' . $campusSession . '&containerId=' . $containerId;
        //$this->service("/game/like/" . $productId . "/del", "POST", $body);
        $this->service("/game/" . $productId . "/unlike/", "POST", $body);
    }

    //TODO (other plugin?)
    public function getLikesGame($campusSession, &$entity) {
      //return $this->service("/game/like/" . $campusSession . "/list/" . $entity->getGuid());
      return $this->service("/game/" . $campusSession . "/list/" . $entity->getGuid());
    }

    //TODO (other plugin?)
    public function getLikeGame($campusSession, $idEntity) {
      //return $this->service("/game/like/" . $campusSession . "/get/" . $idEntity);
     return $this->service("/game/" . $campusSession . "/get/" . $idEntity);
    
    }

  /**
   * Delete Game
   * API2
   */
  public function delGame($campusSession, $idGame) {
    $body = 'secretSession=' . $campusSession;
    return $this->service('/game/' . $idGame, 'DELETE');
  }

    //TODO (other plugin?)
    public function getScore($gameUid) {
        if ($gameUid == '') $gameUid = '0';
        return $objScore = $this->service("/game/score/" . $gameUid . "/list/");
    }

  /**
   * getListGames
   * API2
   */
  public function getListGames($campusSession, $idOrderer, $idFilterer, $fields, $values) {
    $body = 'secretSession=' . $campusSession;
    $count = count($fields);
    for ($i = 0; $i < $count; $i++) {
      $body = $body . "&fields=" . $fields[$i] . "&values=" . $values[$i];
    }
    
    $games = $this->service('/game/list?order=' . $idOrderer . '&filter=' . $idFilterer);
    return $games['body'];
  }
  
  
  public function getListGamesSearch($campusSession, $idOrderer, $idFilterer, $fields, $values, $name, $category, $platform, $skill, $sort) {
  
    $num_filters=0;
    $filter="";
    if ($category!="0") {
      	if ($num_filters==0) {
      		$filter="{\"\$and\":[";
      	}
    		if ($num_filters>0) {
    			$filter=$filter . ",";
    		}
    		$filter=$filter . "{\"category\":\"" . $category . "\"}";
	 	 $num_filters++;
    }
    if ($platform!="0") {
      	if ($num_filters==0) {
      		$filter="{\"\$and\":[";
      	}
    		if ($num_filters>0) {
    			$filter=$filter . ",";
    		}
    		$filter=$filter . "{\"platforms\":\"" . $platform . "\"}";
	 	  	$num_filters++;
	 	}
    if ($skill!="0") {
      	if ($num_filters==0) {
      		$filter="{\"\$and\":[";
      	}
    		if ($num_filters>0) {
    			$filter=$filter . ",";
    		}
    		$filter=$filter . "{\"skills\":\"" . $skill . "\"}";
	 	  	$num_filters++;
    }
    if ($num_filters>0) {
	 $filter = $filter . "]}";
    } else {
        $filter="{}";
    }
    
    if ($sort=="1") {
          $sort_expr="{\"name\":1}";
    } else if ($sort=="2") {
          $sort_expr="{\"created_at\":-1}";
    } else if ($sort=="3") {
          $sort_expr="{\"nplay\":-1}"; 
    } else if ($sort=="4") {
          $sort_expr="{\"nlikes\":-1}";
    } 
        
    $body = 'secretSession=' . $campusSession;
    $count = count($fields);
    for ($i = 0; $i < $count; $i++) {
      $body = $body . "&fields=" . $fields[$i] . "&values=" . $values[$i];
    }
    $games = $this->service('/game/listsort?q=' . $filter . '&s=' . $sort_expr);
  
    return $games['body'];
  }
 
  /**
   * getUserListGames
   * API2
   */
  public function getUserListGames($owner, $campusSession) {
    return $this->service('/game/list?q={owner:' . $owner. '}' );

  }

  /**
   * addGame
   * API2
   *
   * $kPAXgame->subtype = "kpax";
   * $kPAXgame->container_guid = (int) get_input('container_guid', $owner); // bobo - del? $_SESSION['user']->getGUID());
   * $kPAXgame->title = $title;
   * $kPAXgame->description = $description;
   * $kPAXgame->idCategory = $category; //NOU
   * $kPAXgame->access_id = ACCESS_LOGGED_IN; // by default, the game is public
   * $kPAXgame->owner_guid = $owner; // by default, the developer is the logged in user
   * $kPAXgame->tags = $tags;        // save tags as metadata
   */
  public function addGame($campusSession, $obj) {
    $body = array (
      'secretSession' => $campusSession,
      'owner' => $obj->owner_guid,
      'name' => $obj->title,
      'description' => $obj->description,
      'category' => $obj->idCategory,
      'tags' => $obj->tags
    );

    return $this->service('/game/' . strval($obj->getGUID()), 'POST', $body);
  }

    /*
    * Obtain all categories.
    * Con esto podemos crear el tema de los distintos parametros, indicando en la variable lo que tiene
    * que responder.
    * Relamente va a suplir la funciÃ³n getTags()
    */
    public function getCategories($type) {
    	if ($type)
        	$listCategories = $this->service("/category/list?q={\"type\":\"".$type."\"}");
        else
        	$listCategories = $this->service("/category/list");
        return $listCategories['body'];
    }

  /**
   * 
   * API2
   * Why??
   */
  public function getCategory($campusSession, $idCategory) {
    if ($idCategory == '') $idCategory = '0';
    $objCategory = $this->service('/game/category/' . $idCategory );
    return $objCategory;
  }

    //TODO (other plugin?)
    public function getCommentsGame($campusSession, $idGame) {
      return $this->service("/game/comment/" . $campusSession . "/list/" . $idGame);
    }

    //TODO (other plugin?)
    public function addCommentGame($campusSession, $idGame, $idComment) {
        $body = 'secretSession=' . $campusSession . "&idGame=" . $idGame;
        return $this->service("/game/comment/" . $idComment . "/add/", "POST", $body);
    }

    //TODO (other plugin?)
    public function delCommentGame($campusSession, $idComment) {
        $body = 'secretSession=' . $campusSession . '&containerId=' . $containerId;
        return $this->service("/game/comment/" . $idComment . "/del/", "POST", $body);
    }

    //TODO (other plugin?)
    public function getTagsGame($campusSession, $idGame) {
        return $this->service("/game/tag/" . $campusSession . "/list/" . $idGame);
        return $listTags;
    }  
    
    /**
    *Give Similar Games of the game.
    * 
    * Realmente cuando se devuelve el juego ya lleva los juegos similares.
    * TODO JAVI
    * 
    */
    public function getListSimilarGames($idGame, $session){
    	
    		
    }

}

?>
